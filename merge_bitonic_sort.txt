Merge Sort:
    Merge Sort is a popular divide-and-conquer sorting algorithm that efficiently sorts an array by recursively dividing it into two halves, sorting each half, and then merging the sorted halves to produce the final sorted array.

Bitonic Sort:
    Bitonic Sort is an efficient parallel sorting algorithm that requires the input size to be a power of 2. It is based on the concept of bitonic sequences, which are sequences that first monotonically increase and then monotonically decrease or vice versa. The algorithm recursively builds a bitonic sequence, and then repeatedly merges bitonic sequences to achieve sorting.

Data Structure Used: Arrays
Time Complexity:
Merge Sort:  O(nlogn)
Bitonic Sort:  O(log^2 n)

Implementation:
    CPU Merge Sort: This is a traditional CPU-based implementation of the Merge Sort algorithm using a recursive approach.

    GPU Merge Sort: The GPU version of Merge Sort that uses CUDA to achieve parallelism. It utilizes CUDA kernels to perform sorting operations on the GPU.

    CPU Bitonic Sort: A CPU-based implementation of the Bitonic Sort algorithm. It requires the input size to be a power of 2.

    GPU Bitonic Sort: The GPU version of Bitonic Sort that takes advantage of CUDA parallelism. Like the GPU Merge Sort, it uses CUDA kernels for
    sorting on the GPU.